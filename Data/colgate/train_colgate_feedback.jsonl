{"question": "How is Colgate's unit SOM performance?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer LIKE 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE market_desc = 'Total US xAOC';", "feedback": "The first query is incorrect because it uses the table name 'colgate' which is not present in the given schema. The correct table name should be used instead. The second query is correct but can be improved by removing the table name from the query as it is not needed"}
{"question": "How is Colgate's share of market performance in terms of unit sales YTD?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer LIKE 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The query to be improved is missing the 'FROM' keyword and the table name. The correct query should be: SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer LIKE 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate"}
{"question": "How is Colgate's unit SOM performance YTD in Target?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer LIKE 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Target Total BM/FF TA';", "feedback": "The first query is missing the table name and the second query has a typo in the column name 'year_value' which should be 'year_sold'."}
{"question": "How is the manufacturer Colgate's sales volume SOM performance?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) AS total_volume_colgate, SUM(sales_volume) AS total_volume_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) * 100.0) / SUM(sales_volume) AS colgate_volume_share FROM colgate WHERE market_desc = 'Total US xAOC';", "feedback": "The first query is missing the 'FROM' clause and the second query is missing the 'FROM' clause and the table name. To enhance the query, add the 'FROM' clause with the correct table name"}
{"question": "How is Colgate's total sales and total sales volume SOM performance YTD", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) AS total_value_colgate, SUM(sales_value) AS total_value_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) * 100.0) / SUM(sales_value) AS colgate_value_share, SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) AS total_volume_colgate, SUM(sales_volume) AS total_volume_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) * 100.0) / SUM(sales_volume) AS colgate_volume_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the 'FROM' keyword and the second query is missing the 'FROM' keyword and the table name. To enhance the query, add the 'FROM' keyword and the table name to both queries"}
{"question": "How is Colgate's unit SOM performance YTD grouped by market?", "sql": "SELECT market_desc, SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer LIKE 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the `SUM` aggregation function in the subquery, and the second query is missing the `GROUP BY` clause. To enhance the first query, add `SUM` to the subquery, and to enhance the second query, add `GROUP BY year_value`"}
{"question": "What are total sales for each brand in manufacturer P&G?", "sql": "SELECT brand, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'P&G' AND market_desc = 'Total US xAOC' GROUP BY brand;", "feedback": "The first query is missing the `SUM` aggregation function and the `market_desc` filter, which are present in the correct query. The correct query also groups by the `brand` column"}
{"question": "What are total sales for each brand in manufacturer Colgate?", "sql": "SELECT brand, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'COLGATE' AND market_desc = 'Total US xAOC' GROUP BY brand;", "feedback": "The first query is missing the table name and the second query is more specific in its conditions, filtering by market_desc as well as manufacturer. To enhance the first query, add the table name and the market_desc condition to match the second query"}
{"question": "What are the total sales and total units sold for Crest 3d white brand in Target?", "sql": "SELECT SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Target Total BM/FF TA';", "feedback": "The first query is missing the table name, which is 'colgate'. The second query is correct, but it's missing the table name, which is 'colgate'."}
{"question": "What are the total sales and total units sold for COLGATE MAX FRANCHISE brand in Family Dollar?", "sql": "SELECT SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'COLGATE MAX FRANCHISE' AND market_desc = 'Family Dollar Total TA';", "feedback": "The first query is missing the table name, and the second query has a typo in the column name'market_desc' which should be'market_description'."}
{"question": "What are the total sales and total units sold for Crest 3d white brand?", "sql": "SELECT SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the condition for market_description, which is present in the true SQL query. To enhance the query, add the market_description condition to the WHERE clause"}
{"question": "What are SKU sales for each market?", "sql": "SELECT market_desc, item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, item, long_desc;", "feedback": "The first query is missing the `SUM` aggregation function for `sales_units`, and the second query is missing the `total_sales_units` alias. To enhance the first query, add `SUM` and alias it as `total_sales_units`"}
{"question": "What are SKU sales for all items?", "sql": "SELECT item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY item, long_desc;", "feedback": "The first query is missing the GROUP BY clause, which is necessary to group the results by item and long_desc. The second query is correct, but it can be improved by adding a WHERE clause to filter the results to only include the 'Total US xAOC' market description"}
{"question": "What are SKU sales for all items in Target?", "sql": "SELECT item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate WHERE market_desc = 'Target Total BM/FF TA' GROUP BY item, long_desc;", "feedback": "The first query is missing the `GROUP BY` clause, which is necessary to group the results by the `item`, `long_desc` columns. The second query is missing the `FROM` clause, which specifies the table to query"}
{"question": "What are SKU sales for all items in Family Dollar?", "sql": "SELECT item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate WHERE LOWER(market_desc) LIKE '%family dollar total%' GROUP BY item, long_desc;", "feedback": "The first query is missing the `SUM` aggregation function to calculate the total sales units, and the second query is missing the `FROM` clause to specify the table name. To enhance the first query, add the `SUM` function and the `FROM` clause, and to enhance the second query, add the `FROM` clause to specify the table name"}
{"question": "What are SKU sales for all items in ShopRite?", "sql": "SELECT item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate WHERE LOWER(market_desc) LIKE '%shoprite%' GROUP BY item, long_desc;", "feedback": "The first query is missing the `SUM` aggregation function to calculate the total sales units, and the second query is missing the `FROM` clause. To enhance the first query, add `SUM(sales_units) AS total_sales_units` to the `SELECT` clause and `FROM colgate` to the query. To enhance the second query, add `FROM colgate` to the query"}
{"question": "What are SKU sales for all items in Colgate franchise?", "sql": "SELECT item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate WHERE market_desc = 'Total US xAOC' AND franchise = 'COLGATE' GROUP BY item, long_desc;", "feedback": "The first query is missing the GROUP BY clause, which is necessary to group the results by item and long_desc. The second query is correct, but it uses the table name 'colgate' which is not present in the given schema, it should be replaced with the actual table name"}
{"question": "What are total sales for each product variant in each market?", "sql": "SELECT market_desc, variant, SUM(sales_value) AS total_sales FROM colgate GROUP BY market_desc, variant;", "feedback": "The first query is missing the correct table name, and the second query is missing the correct column names. To enhance the query, replace 'table_name' with the actual table name and'market_description' with'market_desc' in the first query, and'sales_value' with 'total_sales_value' in the second query"}
{"question": "What are total sales for each product variant in the Colgate franchise in ShopRite?", "sql": "SELECT variant, SUM(sales_value) AS total_sales FROM colgate WHERE market_desc = 'ShopRite Total TA' AND franchise = 'COLGATE' GROUP BY variant;", "feedback": "The first query is missing the table name, and the second query is missing the table name and has a typo in the column name 'franchise'. The correct query should be: SELECT SUM(total_sales_value) FROM table_name WHERE franchise_line = 'COLGATE' AND subbrand = 'OPTIC WHITE' AND brand = 'CREST' AND product_variant = 'Mint Flavor';"}
{"question": "What are total sales for each product variant in Crest franchise in Target?", "sql": "SELECT variant, SUM(sales_value) AS total_sales FROM colgate WHERE market_desc = 'Target Total BM/FF TA' AND franchise = 'CREST' GROUP BY variant;", "feedback": "The first query is missing the table name, and the second query is missing the table name and has a typo in the column name 'franchise'."}
{"question": "What are total sales for each product variant in Target?", "sql": "SELECT variant, SUM(sales_value) AS total_sales FROM colgate WHERE market_desc = 'Target Total BM/FF TA' GROUP BY variant;", "feedback": "The query to be improved is missing the table name in the FROM clause. The corrected query should be: SELECT product_variant, SUM(total_sales_value) FROM table_name WHERE category = 'oral care' GROUP BY product_variant; The true SQL query is correct, but it could be improved by adding a more specific table name to avoid ambiguity"}
{"question": "What are total units sold in each market?", "sql": "SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc;", "feedback": "The query to be improved is missing the table name in the SELECT statement. The correct query should include the table name in the FROM clause"}
{"question": "For each segment and year, what are the total unit sales, value share and sales volume?", "sql": "SELECT segment, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_volume) AS total_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value;", "feedback": "The first query is missing the table name, which should be included in the FROM clause. The second query is correct, but it uses the alias 'year_value' which is not present in the schema, it should be 'year_sold' instead"}
{"question": "Which brand has the highest overall total revenue?", "sql": "SELECT brand FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY brand ORDER BY SUM(sales_value) DESC LIMIT 1;", "feedback": "The first query is missing the WHERE clause to filter the data, and the second query is correct but it is filtering by a specific market description, whereas the first query is not. To enhance the first query, add a WHERE clause to filter the data and consider adding a GROUP BY clause to group the data by brand"}
{"question": "Which brand has the lowest overall total revenue?", "sql": "SELECT brand FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY brand ORDER BY SUM(sales_value) ASC LIMIT 1;", "feedback": "The first query is missing the condition to filter by market description, which is necessary to get the correct result. The second query is correct because it groups by brand and orders by the sum of sales value in ascending order, returning the brand with the lowest total sales value"}
{"question": "Which market has the highest total sales value?", "sql": "SELECT market_desc FROM colgate GROUP BY market_desc ORDER BY SUM(sales_value) DESC LIMIT 1;", "feedback": "The first query is missing the GROUP BY clause, which is necessary to group the results by market_description before ordering and limiting. The second query is correct, but it's missing the table name in the SELECT statement"}
{"question": "Which segment has the highest total revenue?", "sql": "SELECT segment FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment ORDER BY SUM(sales_value) DESC LIMIT 1;", "feedback": "The first query is missing the WHERE clause to filter the data, and the second query is missing the GROUP BY clause to group the data by segment. To enhance the first query, add a WHERE clause to filter the data and a GROUP BY clause to group the data by segment"}
{"question": "Which brand has the highest total sales volume?", "sql": "SELECT brand FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY brand ORDER BY SUM(sales_volume) DESC LIMIT 1;", "feedback": "The first query is missing the WHERE clause to filter the data, whereas the true SQL query has a WHERE clause to filter by market description. The first query should be modified to include a WHERE clause to filter the data"}
{"question": "Which brand has the lowest total sales volume?", "sql": "SELECT brand FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY brand ORDER BY SUM(sales_volume) ASC LIMIT 1;", "feedback": "The first query is missing the condition to filter by market description, which is necessary to get the correct result. The second query is correct because it groups by brand and orders by the sum of sales volume, which is the correct way to get the brand with the lowest total sales volume for the given market description"}
{"question": "Which brand has the highest sales volume under the Colgate franchise?", "sql": "SELECT brand FROM colgate WHERE market_desc = 'Total US xAOC' AND franchise = 'COLGATE' GROUP BY brand ORDER BY SUM(sales_volume) DESC LIMIT 1;", "feedback": "The first query is missing a subquery to get the maximum total_sales_volume, and the second query is missing a subquery to get the sum of sales_volume for each brand. To enhance the query, add a subquery to get the maximum total_sales_volume for the given franchise_line and use it in the main query to filter the results"}
{"question": "Which brand has the lowest sales volume under the Colgate franchise?", "sql": "SELECT brand FROM colgate WHERE market_desc = 'Total US xAOC' AND franchise = 'COLGATE' GROUP BY brand ORDER BY SUM(sales_volume) ASC LIMIT 1;", "feedback": "The first query is missing the GROUP BY clause, which is necessary to group the results by brand before ordering and limiting them. The second query is correct, but it's filtering by market_desc and franchise, whereas the first query is filtering by franchise_line. To make the first query correct, add a GROUP BY brand clause and consider changing the filter to franchise_line = 'COLGATE' to match the second query"}
{"question": "Which Colgate size has the highest sales volume for the brand 'COLGATE MAX FRANCHISE'?", "sql": "SELECT colgate_size FROM colgate WHERE market_desc = 'Total US xAOC' AND brand = 'COLGATE MAX FRANCHISE' GROUP BY colgate_size ORDER BY SUM(sales_volume) DESC LIMIT 1;", "feedback": "The first query is missing the GROUP BY clause, which is necessary to group the results by the size column. The second query is correct, but it's missing the table name in the FROM clause, which should be 'table' instead of 'colgate'."}
{"question": "Which brands had the highest total promotional sales value in Family Dollar?", "sql": "SELECT brand, SUM(promo_sales_value) AS total_promo_sales_value FROM colgate WHERE LOWER(market_desc) LIKE '%family dollar%' GROUP BY brand ORDER BY total_promo_sales_value DESC;", "feedback": "The first query is missing the `SUM` aggregation function to calculate the total promo sales value for each brand. The second query is correct but can be improved by adding a case-insensitive search by using the `LOWER` function on the `market_desc` column"}
{"question": "Which brands had the highest total promotional sales value in Target?", "sql": "SELECT brand, SUM(promo_sales_value) AS total_promo_sales_value FROM colgate WHERE LOWER(market_desc) LIKE '%target%' GROUP BY brand ORDER BY total_promo_sales_value DESC;", "feedback": "The first query is missing a subquery to get the maximum total_sales_value, and the second query is missing a table name in the WHERE clause. To enhance the query, add a subquery to get the maximum total_sales_value and use the correct table name in the WHERE clause"}
{"question": "Which brands had the highest total promotional sales units in Target?", "sql": "SELECT brand, SUM(promo_sales_units) AS total_promo_sales_units FROM colgate WHERE LOWER(market_desc) LIKE '%target%' GROUP BY brand ORDER BY total_promo_sales_units DESC;", "feedback": "The query is missing the table name in the subquery, and the column name in the subquery should be 'total_sales_units' instead of 'total_sales_units'."}
{"question": "Which brands had the highest total promotional sales volume in Target?", "sql": "SELECT brand, SUM(promo_sales_volume) AS total_promo_sales_volume FROM colgate WHERE LOWER(market_desc) LIKE '%target%' GROUP BY brand ORDER BY total_promo_sales_volume DESC;", "feedback": "The first query is missing a subquery to get the maximum total_sales_volume, and the second query is missing the table name in the WHERE clause. To enhance the query, add a subquery to get the maximum total_sales_volume and use the correct table name in the WHERE clause"}
{"question": "Which brands had the lowest total promotional sales value in Target?", "sql": "SELECT brand, SUM(promo_sales_value) AS total_promo_sales_value FROM colgate WHERE LOWER(market_desc) LIKE '%target%' GROUP BY brand ORDER BY total_promo_sales_value ASC;", "feedback": "The first query is missing the table name in the subquery, and the second query is missing the table name in the FROM clause. To enhance the query, add the table name to the subquery and the FROM clause"}
{"question": "Which brands had the lowest total promotional sales units in Target?", "sql": "SELECT brand, SUM(promo_sales_units) AS total_promo_sales_units FROM colgate WHERE LOWER(market_desc) LIKE '%target%' GROUP BY brand ORDER BY total_promo_sales_units ASC;", "feedback": "The first query is missing the `SUM` aggregation function to calculate the total promo sales units, and the second query is missing the `MIN` aggregation function to find the minimum total sales units. To enhance the query, add the `SUM` function to the first query and the `MIN` function to the second query"}
{"question": "Which brands had the lowest total promotional sales volume in Target?", "sql": "SELECT brand, SUM(promo_sales_volume) AS total_promo_sales_volume FROM colgate WHERE LOWER(market_desc) LIKE '%target%' GROUP BY brand ORDER BY total_promo_sales_volume ASC;", "feedback": "The first query is missing the subquery, which is necessary to calculate the minimum total sales volume. The second query is missing the table name in the FROM clause"}
{"question": "Which products from Crest franchise were on promo in Family Dollar in March 2024? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 3 GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column in the `WHERE` clause, which is necessary to filter the data. The second query is missing the `month_date` column in the `WHERE` clause as well, and it also uses `month_445` which is not present in the schema. The correct query should use `month_date` instead"}
{"question": "Which products from Crest franchise were on promo in Target in March 2024? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 3 GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the `strftime` function to extract the month from the `month_date` column, and it's also missing the `DISTINCT` keyword to remove duplicate rows. The correct query should use `strftime('%m', month_date) = 3` instead of `CAST(strftime('%m', month_445) AS INTEGER) = 3`"}
{"question": "Which products from Colgate franchise were on promo in ShopRite in March 2024? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'COLGATE' AND year_value = '2024' AND LOWER(market_desc) LIKE '%shoprite%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 3 GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the `strftime` function to extract the month from the `month_date` column, and it's also missing the `lower` function to make the case-insensitive search for the `market_description` column. The true SQL query uses `strftime` to extract the month and `lower` to make the search case-insensitive"}
{"question": "Which products from Crest franchise were on promo in Family Dollar in October 2024? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 10 GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column in the `WHERE` clause, which is used in the second query. The second query is correct but can be improved by using the `strftime` function to extract the month from the `month_date` column instead of `month_445`"}
{"question": "Which products from Colgate franchise were on promo in Target in June 2024? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'COLGATE' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 6 GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the 'franchise' column, which is present in the true SQL query. To enhance the query, add the 'franchise' column to the WHERE clause"}
{"question": "Which products from Colgate franchise were on promo in Family Dollar in December 2024? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'COLGATE' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 12 GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the 'AND' keyword between the conditions in the WHERE clause. The correct query should use 'AND' to combine the conditions. The true SQL query is correct but can be improved by adding a LIMIT clause to restrict the number of results"}
{"question": "Which Colgate brand had the highest total sales value in the Family Dollar Total market, and what is the sales value?", "sql": "SELECT brand, SUM(sales_value) AS total_sales_value FROM colgate WHERE LOWER(market_desc) LIKE '%family dollar total%' AND LOWER(franchise) LIKE '%colgate%' GROUP BY brand ORDER BY total_sales_value DESC LIMIT 1;", "feedback": "The first query is missing the `SUM` aggregation function to calculate the total sales value for each brand, and the second query is correct but can be improved by using the exact match for the market description and franchise, instead of using `LIKE` with wildcards"}
{"question": "Which products from Crest franchise that were on promo in Family Dollar in March 2024 are multi-pack? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 3 AND multi_pack = 'MULTI' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the join condition for the second table, and the second query is missing the join condition for the second table. To enhance the query, add the join condition to the first query and remove the join condition from the second query, as it is not necessary"}
{"question": "Which products from Crest franchise that were on promo in Family Dollar in March 2024 are single-pack? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 3 AND multi_pack = 'SINGLE' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column in the `WHERE` clause, which is used in the second query. The second query uses `month_445` which is not present in the given schema. The correct query should use `month_date` instead"}
{"question": "Which products from Crest franchise that were on promo in Family Dollar in March 2024 are banded packs? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 3 AND multi_pack = 'BANDED' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column, which is used in the second query. The second query is correct, but it can be improved by using the `strftime` function to extract the month from the `month_date` column instead of `month_445`"}
{"question": "Which products from Crest franchise that were on promo in Target in September 2024 are multi-pack? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 9 AND multi_pack = 'MULTI' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column, which is used in the second query. The second query is correct, but it can be improved by using the `strftime` function to extract the month from the `month_date` column instead of `month_445`"}
{"question": "Which products from Crest franchise that were on promo in Target in October 2024 are single-pack? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 10 AND multi_pack = 'SINGLE' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `brand` filter, which is present in the true SQL query. The second query is missing the `size` filter, which is present in the true SQL query. To enhance the query, add the missing filters to match the true SQL query"}
{"question": "Which products from Crest franchise that were on promo in Target in December 2024 are banded packs? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 12 AND multi_pack = 'BANDED' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column, which is used in the second query. The second query is correct, but it can be improved by using the `strftime` function to extract the month from the `month_date` column instead of `month_445`"}
{"question": "Which products from Colgate franchise that were on promo in Family Dollar in June 2024 are multi-pack? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'COLGATE' AND year_value = '2024' AND LOWER(market_desc) LIKE '%family dollar%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 6 AND multi_pack = 'MULTI' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the 'AND' keyword between the two conditions in the WHERE clause. The correct query should be: SELECT item_code, long_description FROM table_name WHERE manufacturer = 'COLGATE' AND subcategory = 'MULTI-PACK' AND month_date LIKE '2024-06-%'."}
{"question": "Which products from Colgate franchise that were on promo in Target in June 2024 are single-pack? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'COLGATE' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 6 AND multi_pack = 'SINGLE' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `strftime` function to extract the month from the `month_date` column, and the second query is missing the `strftime` function to extract the month from the `month_445` column. To enhance the query, use `strftime('%m', month_date)` and `strftime('%m', month_445)` respectively"}
{"question": "Which products from Colgate franchise that were on promo in Target in June 2024 are banded packs? Include item and long description for each item.", "sql": "SELECT distinct item, long_desc FROM colgate WHERE franchise = 'COLGATE' AND year_value = '2024' AND LOWER(market_desc) LIKE '%target%' AND promo_sales_units > 0 AND CAST(strftime('%m', month_445) AS INTEGER) = 6 AND multi_pack = 'BANDED' GROUP BY item, long_desc ORDER BY item, long_desc;", "feedback": "The first query is missing the `month_date` column, which is used in the second query. The second query is correct, but it can be improved by using the `strftime` function to extract the month from the `month_date` column instead of `month_445`"}
{"question": "How is each manufacturer doing YOY in terms of sales value with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) AS total_sales_value_2024, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) AS yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY manufacturer;", "feedback": "The first query is missing the calculation for the year-over-year (YoY) sales value, which is the main difference between the two queries. To enhance the query, add the calculation for YoY sales value as in the true SQL query. The true SQL query also groups by manufacturer, which is not present in the first query"}
{"question": "How is each manufacturer doing YOY in terms of sales volume with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) AS total_sales_volume_2024, SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END) AS total_sales_volume_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) AS yoy_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY manufacturer;", "feedback": "The first query is missing the calculation for year-over-year (YoY) sales volume change, which is the main difference between the two queries. To enhance the first query, add a window function to calculate the difference in sales volume between the current and previous year for each manufacturer"}
{"question": "How is each manufacturer doing YOY in terms of units sold with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_units ELSE 0 END) AS total_sales_units_2024, SUM(CASE WHEN year_value = 2023 THEN sales_units ELSE 0 END) AS total_sales_units_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_units ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_units ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_units ELSE 0 END)) AS yoy_sales_units FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY manufacturer;", "feedback": "The first query is missing the calculation for year-over-year (YoY) change in sales units, which is the main goal of the second query. To enhance the first query, add a window function to calculate the difference in sales units between the current and previous year for each manufacturer"}
{"question": "How is each manufacturer doing Q1 YOY in terms of sales value with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) AS total_sales_value_2024, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) AS q1_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 1 AND 3 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the `CASE` statements. The second query is correct, but it can be improved by adding a check for division by zero in the `q1_yoy_sales_value` calculation"}
{"question": "How is each manufacturer doing Q2 YOY in terms of sales value with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) AS total_sales_value_2024, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) AS q2_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query is correct, but it can be improved by adding a check for division by zero in the `q2_yoy_sales_value` calculation"}
{"question": "How is each manufacturer doing Q3 YOY in terms of sales value with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) AS total_sales_value_2024, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) AS q3_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 7 AND 9 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query uses `CAST(strftime('%m', month_445) AS INTEGER)` to filter by month, but the first query uses `month_date`. To make the queries equivalent, the first query should use `CAST(strftime('%m', month_date) AS INTEGER)` to filter by month"}
{"question": "How is each manufacturer doing Q4 YOY in terms of sales value with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) AS total_sales_value_2024, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END)) AS q4_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 10 AND 12 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query is correct, but it can be improved by adding a check for division by zero in the `q4_yoy_sales_value` calculation"}
{"question": "How is each manufacturer doing Q1 YOY in terms of sales volume with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) AS total_sales_volume_2024, SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END) AS total_sales_volume_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) AS q1_yoy_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 1 AND 3 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query uses `CAST(strftime('%m', month_445) AS INTEGER)` to filter by month, but the first query uses `month_date`. To make the queries equivalent, the first query should be modified to use `CAST(strftime('%m', month_date) AS INTEGER)` to filter by month"}
{"question": "How is each manufacturer doing Q2 YOY in terms of sales volume with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) AS total_sales_volume_2024, SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END) AS total_sales_volume_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) AS q2_yoy_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query is correct, but it can be improved by adding a check for division by zero to avoid errors when the `SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)` is zero"}
{"question": "How is each manufacturer doing Q3 YOY in terms of sales volume with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) AS total_sales_volume_2024, SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END) AS total_sales_volume_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) AS q3_yoy_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 7 AND 9 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query uses `CAST(strftime('%m', month_445) AS INTEGER)` to filter by month, but the first query uses `month_date`. To make the queries equivalent, the first query should be modified to use `CAST(strftime('%m', month_date) AS INTEGER)` to filter by month"}
{"question": "How is each manufacturer doing Q4 YOY in terms of sales volume with the current year being 2024?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) AS total_sales_volume_2024, SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END) AS total_sales_volume_2023, ROUND((SUM(CASE WHEN year_value = 2024 THEN sales_volume ELSE 0 END) - SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2023 THEN sales_volume ELSE 0 END)) AS q4_yoy_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 10 AND 12 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query uses `CAST(strftime('%m', month_445) AS INTEGER)` to filter by month, but the first query uses `month_date`. To make the queries equivalent, the first query should be modified to use `CAST(strftime('%m', month_date) AS INTEGER)` to filter by month"}
{"question": "What is each manufacturer's performance in Q1 YOY in terms of sales value with the current year being 2023?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END) AS total_sales_value_2022, ROUND((SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END)) AS q1_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 1 AND 3 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. The second query uses `CAST(strftime('%m', month_445) AS INTEGER)` to extract the month, but the first query does not have a similar expression. To make the queries comparable, the first query should be modified to extract the month from the `month_date` column and use it to filter the data"}
{"question": "What is each manufacturer's performance in Q2 YOY in terms of sales value with the current year being 2022?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END) AS total_sales_value_2022, SUM(CASE WHEN year_value = 2021 THEN sales_value ELSE 0 END) AS total_sales_value_2021, ROUND((SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2021 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2021 THEN sales_value ELSE 0 END)) AS q2_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer;", "feedback": "The first query is missing the year 2021 sales value calculation and the year-over-year (YoY) sales value calculation. The second query is correct but has a condition on the month, which is not present in the first query. To enhance the first query, add the year 2021 sales value calculation and the YoY sales value calculation, and remove the month condition from the second query"}
{"question": "What is each manufacturer's performance in Q3 YOY in terms of sales value with the current year being 2022?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END) AS total_sales_value_2022, SUM(CASE WHEN year_value = 2021 THEN sales_value ELSE 0 END) AS total_sales_value_2021, ROUND((SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2021 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2021 THEN sales_value ELSE 0 END)) AS q3_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 7 AND 9 GROUP BY manufacturer;", "feedback": "The first query is missing the calculation for the year 2021 sales value, which is present in the true SQL query. The first query should be modified to include the year 2021 sales value calculation"}
{"question": "What is each manufacturer's performance in Q4 YOY in terms of sales value with the current year being 2023?", "sql": "SELECT manufacturer, SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) AS total_sales_value_2023, SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END) AS total_sales_value_2022, ROUND((SUM(CASE WHEN year_value = 2023 THEN sales_value ELSE 0 END) - SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END)) * 100.0 / SUM(CASE WHEN year_value = 2022 THEN sales_value ELSE 0 END)) AS q4_yoy_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 10 AND 12 GROUP BY manufacturer;", "feedback": "The first query is missing the `year_sold` column, which is used in the `CASE` statement. The second query is correct, but it's filtering by `market_desc` instead of `market_description`. To enhance the query, replace `year_value` with `year_sold` in the first query and `market_desc` with `market_description` in the second query"}
{"question": "What is the sales velocity of optic white products in Family Dollar for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH optic_white_prods AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'COLGATE OPTIC WHITE' AND market_desc = 'Family Dollar Total TA' and year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM optic_white_prods) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the subquery to calculate sales_velocity, whereas the true SQL query uses a Common Table Expression (CTE) to calculate sales_velocity. To enhance the query, replace the first query with the true SQL query's CTE"}
{"question": "What is the sales velocity of optic white products in Target for 2023? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH optic_white_prods AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'COLGATE OPTIC WHITE' AND market_desc = 'Target Total BM/FF TA' and year_value = 2023 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM optic_white_prods) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `WITH` clause to define the common table expression (CTE) `sales_velocity_calculation`, and the second query is missing the `FROM` clause to specify the table to select from. To enhance the query, add the `WITH` clause to define the CTE and the `FROM` clause to specify the table"}
{"question": "What is the sales velocity of Crest 3d white products for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH crest_3d_white_prods AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' and year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM crest_3d_white_prods) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the calculation of sales_velocity, which is the main goal of the query. The second query is correct but can be improved by adding a WHERE clause to filter the results by year_sold = 2024"}
{"question": "What is the sales velocity of optic white products for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH optic_white_prods AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'COLGATE OPTIC WHITE' AND market_desc = 'ShopRite Total TA' and year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM optic_white_prods) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `WITH` clause to define the common table expression (CTE) and the second query is correct. To enhance the first query, add the `WITH` clause to define the CTE and use the same column names in the final `SELECT` statement"}
{"question": "What is the sales velocity of Crest 3d white products for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH crest_3d_white_prods AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' and year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM crest_3d_white_prods) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the calculation of sales_velocity, which is the main goal of the query. The second query is correct but can be improved by adding a WHERE clause to filter the results by year_sold = 2024"}
{"question": "What is the sales velocity of Crest 3d white products for 2023? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH crest_3d_white_prods AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' and year_value = 2023 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM crest_3d_white_prods) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `FROM` clause and the second query is using a CTE (Common Table Expression) to calculate the sales velocity, which is a more efficient and readable way to perform the calculation. To enhance the first query, add the `FROM` clause and consider using a CTE for better readability and performance"}
{"question": "What is the sales velocity of products from Colgate franchise in ShopRite for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH colgate_franchise_prods AS (SELECT year_value, item, market_desc, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE franchise = 'COLGATE' AND market_desc = 'ShopRite Total TA' and year_value = 2024 GROUP BY year_value, item, market_desc, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM colgate_franchise_prods) SELECT year_value, item, market_desc, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `FROM` clause, which is required to specify the table to query. The second query is a correct SQL query that calculates the sales velocity for Colgate products in the ShopRite Total TA market for the year 2024, but it uses a Common Table Expression (CTE) to calculate the sales velocity, which is not necessary in this case"}
{"question": "What is the sales velocity of products from Colgate franchise in Target for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH colgate_franchise_prods AS (SELECT year_value, item, market_desc, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE franchise = 'COLGATE' AND market_desc = 'Target Total BM/FF TA' and year_value = 2024 GROUP BY year_value, item, market_desc, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM colgate_franchise_prods) SELECT year_value, item, market_desc, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `WITH` clause to define the temporary result set `sales_velocity_calculation`, and the second query is missing the `FROM` clause to specify the table to select from. To enhance the query, add the `WITH` clause to define the temporary result set and the `FROM` clause to specify the table"}
{"question": "What is the sales velocity of products from Colgate franchise for 2024? Sales velocity is defined as sum of sales value divided by sum of All Commodity Volume. Show each item as a separate row, include sales velocity as a column and sort in descending order of sales velocity.", "sql": "WITH colgate_franchise_prods AS (SELECT year_value, item, market_desc, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE franchise = 'COLGATE' AND market_desc = 'Total US xAOC' and year_value = 2024 GROUP BY year_value, item, market_desc, long_desc), sales_velocity_calculation AS (SELECT year_value, item, market_desc, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value / tdp END AS sales_velocity FROM colgate_franchise_prods) SELECT year_value, item, market_desc, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `WITH` clause to define the common table expression (CTE) and the second query is using a CTE to calculate the sales velocity, which is a more complex and efficient approach. To enhance the first query, consider using a CTE to simplify the calculation and improve readability"}
{"question": "Basic filter for current year to date", "sql": "SELECT * FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The query to be improved is missing the current year in the strftime function, which should be used to get the current year. The correct query should use strftime('%Y', 'now') to get the current year"}
{"question": "What are the total units sold for Colgate?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the table name and the second query is more specific in its conditions, filtering by year and market description. To enhance the first query, add the table name and consider adding more specific conditions to match the second query"}
{"question": "What are the total units sold for all manufacturers?", "sql": "SELECT SUM(sales_units) AS total_units_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The query to be improved is missing the correct table name and column names. The correct query uses 'colgate' as the table name and'sales_units' as the column name"}
{"question": "What is Colgate's unit SOM (Share of Market) YTD?", "sql": "WITH colgate_units AS (SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS units FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), all_units AS (SELECT SUM(sales_units) AS units FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC') SELECT (colgate_units.units * 100.0) / all_units.units AS colgate_unit_share FROM colgate_units, all_units;", "feedback": "The first query is missing the table name in the FROM clause, and the second query is using a Common Table Expression (CTE) which is not necessary in this case. The correct query should use a subquery instead"}
{"question": "What is Colgate's unit SOM by month?", "sql": "SELECT strftime('%m', month_445) AS month, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY month ORDER BY month;", "feedback": "The first query is missing the `SUM` aggregation function for `sales_units` in the denominator, and the second query is missing the `SUM` aggregation function for `sales_units` in the denominator. To enhance the query, add `SUM(sales_units)` to the denominator of the second query"}
{"question": "What are the top 5 Colgate products by unit sales?", "sql": "SELECT brand, subbrand, SUM(sales_units) AS total_units FROM colgate WHERE manufacturer = 'COLGATE' AND year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY brand, subbrand ORDER BY total_units DESC LIMIT 5;", "feedback": "The first query is missing the condition to filter by year, which is present in the true SQL query. The true SQL query also filters by market_desc, which is not present in the first query"}
{"question": "What is Colgate's unit SOM for different product forms?", "sql": "SELECT product_form, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY product_form;", "feedback": "The first query is missing the `SUM(sales_units)` aggregation function in the denominator, which is necessary to calculate the unit share. The second query is correct, but it can be improved by adding a more specific table name to avoid ambiguity"}
{"question": "What is Colgate's unit SOM for different price tiers?", "sql": "SELECT price_tier, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY price_tier;", "feedback": "The first query is missing the `SUM` aggregation function for `sales_units` in the denominator, and the second query is missing the `SUM` aggregation function for `sales_units` in the numerator. To enhance the first query, add `SUM(sales_units)` to the denominator, and to enhance the second query, add `SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END)` to the numerator"}
{"question": "Compare Colgate's promotional vs. non-promotional unit sales", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN promo_sales_units ELSE 0 END) AS promo_units, SUM(CASE WHEN manufacturer = 'COLGATE' THEN no_promo_sales_units ELSE 0 END) AS non_promo_units, SUM(CASE WHEN manufacturer = 'COLGATE' THEN promo_sales_units ELSE 0 END) * 100.0 / SUM(CASE WHEN manufacturer = 'COLGATE' THEN (promo_sales_units + no_promo_sales_units) ELSE 0 END) AS promo_percentage FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the condition to filter by year, whereas the true SQL query includes a condition to filter by the current year using `strftime('%Y', 'now')`. To enhance the query, add the year filter condition to the first query. Also, the first query uses `no_promo_sales_units` which is not present in the given schema, use `sales_units_no_promo` instead"}
{"question": "What is Colgate's total units and unit share?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the `SUM` aggregation function for `total_volume` in the division operation, which will result in a division by zero error. The second query is correct but can be improved by using a single `CASE` statement to calculate the unit share for Colgate and total sales units"}
{"question": "What is Colgate's total value and value share?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) AS total_value_colgate, SUM(sales_value) AS total_value_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) * 100.0) / SUM(sales_value) AS colgate_value_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is incorrect because it divides the sum of total_sales_value by itself, which will always result in 1. The correct query should calculate the total sales value for all manufacturers and then calculate the value share for Colgate by dividing its total sales value by the total sales value for all manufacturers. To improve the query, replace the second SUM(total_sales_value) with SUM(total_sales_value) to calculate the total sales value for all manufacturers"}
{"question": "What is Colgate's total volume and volume share?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) AS total_volume_colgate, SUM(sales_volume) AS total_volume_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) * 100.0) / SUM(sales_volume) AS colgate_volume_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the denominator for the volume share calculation, which is the total sales volume for all manufacturers. The second query is correct but can be improved by removing the WHERE clause for year_value and market_desc as it is not necessary"}
{"question": "Compare of Colgate's unit, value, and volume shares", "sql": "WITH unit_share AS (SELECT (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), value_share AS (SELECT (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) * 100.0) / SUM(sales_value) AS share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), volume_share AS (SELECT (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) * 100.0) / SUM(sales_volume) AS share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC') SELECT unit_share.share AS unit_share, value_share.share AS value_share, volume_share.share AS volume_share FROM unit_share, value_share, volume_share;", "feedback": "The query is correct but can be improved by using a single CTE (Common Table Expression) instead of three separate ones to reduce repetition and improve readability. The query can be simplified by using a single CTE to calculate the shares for all three metrics (unit, value, and volume) at once"}
{"question": "How does Colgate's unit SOM performance compare to unit and value share?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share, SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) AS total_value_colgate, SUM(sales_value) AS total_value_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) * 100.0) / SUM(sales_value) AS colgate_value_share, SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) AS total_volume_colgate, SUM(sales_volume) AS total_volume_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) * 100.0) / SUM(sales_volume) AS colgate_volume_share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is incorrect because it divides total_sales_value by itself, resulting in a division by zero error. The second query is correct but can be improved by removing the WHERE clause to calculate the total sales for all manufacturers, not just COLGATE"}
{"question": "Find Colgate's total units", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the table name and the second query is more specific in its conditions, filtering by year and market description. To enhance the first query, add the table name and consider adding more specific conditions to match the second query"}
{"question": "Find the total units for all manufacturers", "sql": "SELECT SUM(sales_units) AS total_units_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The query to be improved is missing the correct table name and column names. The correct query uses 'colgate' as the table name and'sales_units' as the column name"}
{"question": "Find Colgate's unit share", "sql": "WITH colgate_units AS (SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS units FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), all_units AS (SELECT SUM(sales_units) AS units FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC') SELECT (colgate_units.units * 100.0) / all_units.units AS colgate_unit_share FROM colgate_units, all_units;", "feedback": "The first query is missing the `FROM` clause and the second query is using a Common Table Expression (CTE) to calculate the total units and Colgate units separately, which is a more efficient and readable approach. To enhance the first query, add a `FROM` clause to specify the table name, and to enhance the second query, consider adding a comment to explain the purpose of the CTEs"}
{"question": "What is Colgate's total value?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) AS total_value_colgate FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the condition to filter by year, whereas the true SQL query includes a condition to filter by the current year using the `strftime` function. To enhance the first query, add the condition `AND year_sold = strftime('%Y', 'now')`"}
{"question": "What is the total value for all manufacturers?", "sql": "SELECT SUM(sales_value) AS total_value_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The query to be improved is missing the correct table name and column name. The correct query uses 'colgate' as the table name and 'total_sales_value' as the column name"}
{"question": "What is Colgate's value share?", "sql": "WITH colgate_value AS (SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) AS value FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), all_value AS (SELECT SUM(sales_value) AS value FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC') SELECT (colgate_value.value * 100.0) / all_value.value AS colgate_value_share FROM colgate_value, all_value;", "feedback": "The first query is missing the `FROM` clause, which is required to specify the table(s) to query. The second query is correct, but it can be improved by using a more explicit join instead of a comma-separated list of tables"}
{"question": "What is Colgate's total volume?", "sql": "SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) AS total_volume_colgate FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the table name, and the second query is more specific in filtering the data by year and market description. To enhance the first query, add the table name and filter by year and market description like the second query"}
{"question": "Find the total volume for all manufacturers", "sql": "SELECT SUM(sales_volume) AS total_volume_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC';", "feedback": "The query to be improved is missing the year filter, which is present in the true SQL query. To enhance the query, add the year filter using the `strftime` function to extract the current year"}
{"question": "What is Colgate's volume share?", "sql": "WITH colgate_volume AS (SELECT SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) AS volume FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), all_volume AS (SELECT SUM(sales_volume) AS volume FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC') SELECT (colgate_volume.volume * 100.0) / all_volume.volume AS colgate_volume_share FROM colgate_volume, all_volume;", "feedback": "The first query is missing the 'FROM' clause and the second query is using a Common Table Expression (CTE) to calculate the total volume and Colgate volume, which is more efficient and readable. To enhance the first query, add the 'FROM' clause and consider using a CTE for better readability"}
{"question": "Compare of Colgate's unit, value, and volume shares", "sql": "WITH unit_share AS (SELECT (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), value_share AS (SELECT (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_value ELSE 0 END) * 100.0) / SUM(sales_value) AS share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC'), volume_share AS (SELECT (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_volume ELSE 0 END) * 100.0) / SUM(sales_volume) AS share FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC') SELECT unit_share.share AS unit_share, value_share.share AS value_share, volume_share.share AS volume_share FROM unit_share, value_share, volume_share;", "feedback": "The query is correct but can be improved by using a single CTE (Common Table Expression) instead of three separate ones to reduce repetition and improve readability. The query can be simplified by using a single CTE to calculate the shares for all three metrics (unit, value, and volume) at once"}
{"question": "List the unique retailers (market_desc)", "sql": "SELECT DISTINCT market_desc FROM colgate WHERE year_value = strftime('%Y', 'now') ORDER BY market_desc;", "feedback": "The query to be improved is missing the `strftime` function to extract the current year from the current date, whereas the true SQL query uses it correctly. The corrected query should be `SELECT DISTINCT market_description FROM table WHERE year_sold = strftime('%Y', 'now');"}
{"question": "List Colgate's total units by retailer", "sql": "SELECT market_desc, SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate FROM colgate WHERE year_value = strftime('%Y', 'now') GROUP BY market_desc ORDER BY market_desc;", "feedback": "The first query is missing the table name and the second query is using a non-existent column 'year_value'. To enhance the first query, add the table name and to enhance the second query, replace 'year_value' with 'year_sold'."}
{"question": "What are the total units for all manufacturers by retailer?", "sql": "SELECT market_desc, SUM(sales_units) AS total_units_all FROM colgate WHERE year_value = strftime('%Y', 'now') GROUP BY market_desc ORDER BY market_desc;", "feedback": "The first query is missing the `year_value` column, which is used in the second query. To make it correct, add `year_value` to the `WHERE` clause. Also, consider using `strftime('%Y', 'now')` to get the current year"}
{"question": "What is Colgate's unit share by retailer?", "sql": "SELECT market_desc, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') GROUP BY market_desc ORDER BY colgate_unit_share DESC;", "feedback": "The first query is missing the `SUM` aggregation function for the total sales units, and the second query is missing the `GROUP BY` clause for the `market_desc` column. To enhance the first query, add `SUM` for total sales units, and to enhance the second query, add `GROUP BY market_desc`"}
{"question": "What is Colgate's unit share by retailer with total units?", "sql": "SELECT market_desc, SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) AS total_units_colgate, SUM(sales_units) AS total_units_all, (SUM(CASE WHEN manufacturer = 'COLGATE' THEN sales_units ELSE 0 END) * 100.0) / SUM(sales_units) AS colgate_unit_share FROM colgate WHERE year_value = strftime('%Y', 'now') GROUP BY market_desc ORDER BY colgate_unit_share DESC;", "feedback": "The first query is missing the `SUM` aggregation function for the `colgate_units` column, and the second query is missing the `FROM` clause. To enhance the first query, add `SUM` to the `colgate_units` column, and to enhance the second query, add `FROM table` to the query"}
{"question": "Filter Q2 data", "sql": "SELECT * FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6;", "feedback": "The first query is missing the day of the month in the date range, which is necessary to filter the data correctly. The second query is correct but uses a non-existent column'month_445' instead of'month_date'."}
{"question": "What was the total sales value for each manufacturer in Q2 (for all years)?", "sql": "SELECT manufacturer, year_value, SUM(sales_value) AS total_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer, year_value ORDER BY manufacturer, year_value;", "feedback": "The first query is missing the 'year_value' column in the SELECT statement, and the second query is using the wrong column'month_445' which is not present in the schema. To enhance the query, add 'year_value' to the SELECT statement and use'month_date' instead of'month_445'."}
{"question": "What is the CTE for Q2 sales?", "sql": "WITH sales_q2 AS ( SELECT manufacturer, year_value, SUM(sales_value) AS total_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer, year_value ) SELECT * FROM sales_q2 ORDER BY manufacturer, year_value;", "feedback": "The query is close, but it should use the correct column name'month_date' instead of'month_445'. Also, the correct query should use the 'year_sold' column instead of 'year_value' to filter by year"}
{"question": "What is the YOY comparison for a 2024?", "sql": "WITH sales_q2 AS ( SELECT manufacturer, year_value, SUM(sales_value) AS total_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer, year_value ) SELECT s1.manufacturer, s1.year_value AS current_year, s1.total_sales_value AS current_sales, s2.total_sales_value AS previous_sales, ((s1.total_sales_value - s2.total_sales_value) / s2.total_sales_value) * 100 AS yoy_change FROM sales_q2 s1 JOIN sales_q2 s2 ON s1.manufacturer = s2.manufacturer AND s1.year_value = s2.year_value + 1 WHERE s1.year_value = 2024 ORDER BY yoy_change DESC;", "feedback": "The first query is missing the 'previous_year' column, which is necessary for calculating the year-over-year (YoY) change. The second query is correct, but it can be improved by adding a check to ensure that the previous year's sales are not zero to avoid division by zero errors"}
{"question": "How is each manufacturer doing in Q2 YOY in terms of value?", "sql": "WITH sales_q2 AS ( SELECT manufacturer, year_value, SUM(sales_value) AS total_sales_value FROM colgate WHERE market_desc = 'Total US xAOC' AND CAST(strftime('%m', month_445) AS INTEGER) BETWEEN 4 AND 6 GROUP BY manufacturer, year_value ), sales_q2_yoy AS ( SELECT s1.manufacturer, s1.year_value AS current_year, s1.total_sales_value AS current_sales, s2.total_sales_value AS previous_sales, ((s1.total_sales_value - s2.total_sales_value) / s2.total_sales_value) * 100 AS yoy_change FROM sales_q2 s1 JOIN sales_q2 s2 ON s1.manufacturer = s2.manufacturer AND s1.year_value = s2.year_value + 1 WHERE s1.year_value = 2024 ) SELECT manufacturer, current_sales, previous_sales, yoy_change, current_year - 1 || ' - ' || current_year AS comparison_period FROM sales_q2_yoy ORDER BY yoy_change DESC;", "feedback": "The query to be improved is missing the 'WITH' clause to define the temporary result set'sales_q2_yoy'. The correct query uses a Common Table Expression (CTE) to calculate the year-over-year (YoY) sales change. To enhance the query, add the 'WITH' clause to define the CTE'sales_q2_yoy'."}
{"question": "What is the monthly sales units per manufacturer?", "sql": "SELECT year_value, strftime('%m', month_445) AS month, manufacturer, SUM(sales_units) AS total_units FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445), manufacturer ORDER BY year_value, month, manufacturer;", "feedback": "The first query is missing the `strftime` function to extract the year from the `year_value` column, and the second query is missing the `strftime` function to extract the month from the `month_445` column. To enhance the query, add the `strftime` function to extract the year and month from the respective columns and group by both year and month"}
{"question": "What is the total monthly sales units across all manufacturers?", "sql": "SELECT year_value, strftime('%m', month_445) AS month, SUM(sales_units) AS total_units_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445) ORDER BY year_value, month;", "feedback": "The query is incorrect because it uses `strftime('%Y', 'now')` which is a SQLite function that returns the current year, but the table column is named `year_value`, not `year`. Also, the column name in the `strftime` function is incorrect, it should be `month_445` instead of `month_445`."}
{"question": "List monthly units with total units (using window function)", "sql": "WITH monthly_units AS ( SELECT year_value, strftime('%m', month_445) AS month, manufacturer, SUM(sales_units) AS total_units, SUM(SUM(sales_units)) OVER (PARTITION BY year_value, strftime('%m', month_445)) AS total_units_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445), manufacturer ) SELECT * FROM monthly_units ORDER BY year_value, month, manufacturer;", "feedback": "The first query is missing the PARTITION BY clause in the window function, which is necessary to calculate the total monthly units for each month. The second query is correct, but it can be improved by removing the subquery and using a single query with the PARTITION BY clause"}
{"question": "How is Colgate's unit SOM per month compare to competitors?", "sql": "WITH monthly_units AS ( SELECT year_value, strftime('%m', month_445) AS month, manufacturer, SUM(sales_units) AS total_units, SUM(SUM(sales_units)) OVER (PARTITION BY year_value, strftime('%m', month_445)) AS total_units_all FROM colgate WHERE year_value = strftime('%Y', 'now') AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445), manufacturer ) SELECT year_value, month, manufacturer, total_units, total_units_all, (total_units * 100.0) / total_units_all AS unit_share FROM monthly_units ORDER BY year_value, month, unit_share DESC;", "feedback": "The query is almost correct, but it's missing the join condition between the two tables. To enhance the query, add a join condition to link the two tables based on the required fields"}
{"question": "Filter P&G data", "sql": "SELECT * FROM colgate WHERE manufacturer = 'P&G' AND market_desc = 'Total US xAOC';", "feedback": "The first query is missing the condition for market_desc, which is present in the true SQL query. To enhance the query, add the market_desc condition to the first query"}
{"question": "List total sales per brand per year", "sql": "WITH brand_sales AS ( SELECT brand, year_value, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'P&G' AND market_desc = 'Total US xAOC' GROUP BY brand, year_value ) SELECT * FROM brand_sales ORDER BY brand, year_value;", "feedback": "The first query is missing the `WITH` clause, which is necessary to define the temporary result set `brand_sales`. The second query is correct, but it can be improved by adding a more descriptive alias to the subquery to make it easier to understand"}
{"question": "List Start year, end year, and number of years for each brand", "sql": "WITH brand_sales AS ( SELECT brand, year_value, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'P&G' AND market_desc = 'Total US xAOC' GROUP BY brand, year_value ), brand_years AS ( SELECT brand, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM brand_sales GROUP BY brand ) SELECT * FROM brand_years ORDER BY brand;", "feedback": "The first query is missing the `WITH` clause to define the temporary result set `brand_sales`, and the second query is missing the `year_sold` column in the `SELECT` clause. To enhance the query, add the `WITH` clause to define `brand_sales` and include `year_sold` in the `SELECT` clause of the second query"}
{"question": "List start sales and end sales for each brand", "sql": "WITH brand_sales AS ( SELECT brand, year_value, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'P&G' AND market_desc = 'Total US xAOC' GROUP BY brand, year_value ), brand_years AS ( SELECT brand, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM brand_sales GROUP BY brand ), brand_sales_growth AS ( SELECT b_years.brand, b_years.start_year, b_years.end_year, b_years.num_years, bs_start.total_sales AS start_sales, bs_end.total_sales AS end_sales FROM brand_years b_years JOIN brand_sales bs_start ON b_years.brand = bs_start.brand AND b_years.start_year = bs_start.year_value JOIN brand_sales bs_end ON b_years.brand = bs_end.brand AND b_years.end_year = bs_end.year_value ) SELECT * FROM brand_sales_growth ORDER BY brand;", "feedback": "The first query is missing the `WITH` clause to define the common table expressions (CTEs) and the second query is correct. To enhance the first query, add the `WITH` clause to define the CTEs and use the correct join conditions in the final `SELECT` statement"}
{"question": "Calculate CAGR for each brand and show in descending order.", "sql": "WITH brand_sales AS ( SELECT brand, year_value, SUM(sales_value) AS total_sales FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY brand, year_value ), brand_years AS ( SELECT brand, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM brand_sales GROUP BY brand ), brand_sales_growth AS ( SELECT b_years.brand, b_years.start_year, b_years.end_year, b_years.num_years, bs_start.total_sales AS start_sales, bs_end.total_sales AS end_sales FROM brand_years b_years JOIN brand_sales bs_start ON b_years.brand = bs_start.brand AND b_years.start_year = bs_start.year_value JOIN brand_sales bs_end ON b_years.brand = bs_end.brand AND b_years.end_year = bs_end.year_value ) SELECT brand, start_sales, end_sales, num_years, (POW((end_sales * 1.0 / start_sales), (1.0 / num_years)) - 1) * 100 AS cagr FROM brand_sales_growth WHERE start_sales > 0 ORDER BY cagr DESC;", "feedback": "The first query is missing the calculation for CAGR (Compound Annual Growth Rate), which is the correct query's main goal. The correct query uses a Common Table Expression (CTE) to calculate the total sales for each brand in the start and end years, then calculates the CAGR using the formula: (end_sales / start_sales)^(1/num_years) - 1. The first query only selects the total sales value for each brand, but does not"}
{"question": "What brands are driving $ growth for UNILEVER?", "sql": "WITH brand_sales AS ( SELECT brand, year_value, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'UNILEVER' AND market_desc = 'Total US xAOC' GROUP BY brand, year_value ), brand_years AS ( SELECT brand, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM brand_sales GROUP BY brand ), brand_sales_growth AS ( SELECT b_years.brand, b_years.start_year, b_years.end_year, b_years.num_years, bs_start.total_sales AS start_sales, bs_end.total_sales AS end_sales FROM brand_years b_years JOIN brand_sales bs_start ON b_years.brand = bs_start.brand AND b_years.start_year = bs_start.year_value JOIN brand_sales bs_end ON b_years.brand = bs_end.brand AND b_years.end_year = bs_end.year_value ) SELECT brand, start_sales, end_sales, num_years, (POW((end_sales * 1.0 / start_sales), (1.0 / num_years)) - 1) * 100 AS cagr FROM brand_sales_growth WHERE start_sales > 0 ORDER BY cagr DESC;", "feedback": "The query to be improved is missing the calculation of the compound annual growth rate (CAGR) and the filtering of brands with a CAGR greater than 0. The correct query uses a Common Table Expression (CTE) to calculate the CAGR and filters the results accordingly"}
{"question": "Filter Colgate data", "sql": "SELECT * FROM colgate WHERE manufacturer = 'COLGATE';", "feedback": "The query should be modified to use the correct table name 'colgate' instead of 'table_name'."}
{"question": "What brands are driving $ growth for Colgate?", "sql": "WITH brand_sales AS ( SELECT brand, year_value, SUM(sales_value) AS total_sales FROM colgate WHERE manufacturer = 'COLGATE' AND market_desc = 'Total US xAOC' GROUP BY brand, year_value ), brand_years AS ( SELECT brand, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM brand_sales GROUP BY brand ), brand_sales_growth AS ( SELECT b_years.brand, b_years.start_year, b_years.end_year, b_years.num_years, bs_start.total_sales AS start_sales, bs_end.total_sales AS end_sales FROM brand_years b_years JOIN brand_sales bs_start ON b_years.brand = bs_start.brand AND b_years.start_year = bs_start.year_value JOIN brand_sales bs_end ON b_years.brand = bs_end.brand AND b_years.end_year = bs_end.year_value ) SELECT brand, start_sales, end_sales, num_years, (POW((end_sales * 1.0 / start_sales), (1.0 / num_years)) - 1) * 100 AS cagr FROM brand_sales_growth WHERE start_sales > 0 ORDER BY cagr DESC;", "feedback": "The query to be improved is missing the calculation for CAGR (Compound Annual Growth Rate) and the correct query uses a Common Table Expression (CTE) to calculate the CAGR. To enhance the query, add the CAGR calculation and use a CTE to calculate the CAGR"}
{"question": "Filter Crest 3D White in Target", "sql": "SELECT * FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Target Total BM/FF TA';", "feedback": "The first query is missing the condition for market_desc, which is present in the true SQL query. To enhance the query, add the market_desc condition to the WHERE clause"}
{"question": "What is the monthly sales value and units for Crest 3D White in Target?", "sql": "SELECT year_value, strftime('%m', month_445) AS month, brand, subbrand, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445), brand, subbrand ORDER BY year_value, month, subbrand;", "feedback": "The first query is missing the `GROUP BY` clause, which is necessary to group the results by the specified columns. The second query is correct, but it can be improved by adding a `WHERE` clause to filter the results by the `market_description` column, which is not included in the `GROUP BY` clause"}
{"question": "What is the average price per unit calculation for crest 3D white?", "sql": "WITH brand_data AS ( SELECT year_value, strftime('%m', month_445) AS month, brand, subbrand, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445), brand, subbrand ) SELECT year_value, month, brand, subbrand, total_sales_value * 1.0 / total_sales_units AS avg_price_per_unit FROM brand_data ORDER BY year_value, month, subbrand;", "feedback": "The first query is missing the calculation of average price per unit, which is the correct query's main goal. The correct query uses a Common Table Expression (CTE) to calculate the total sales value and units for each brand and subbrand, then calculates the average price per unit by dividing the total sales value by the total sales units"}
{"question": "What is the year-over-year price change calculation for crest 3d white?", "sql": "WITH brand_data AS ( SELECT year_value, strftime('%m', month_445) AS month, brand, subbrand, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY year_value, strftime('%m', month_445), brand, subbrand ), price_data AS ( SELECT year_value, month, brand, subbrand, total_sales_value * 1.0 / total_sales_units AS avg_price_per_unit FROM brand_data ) SELECT current_year.year_value, current_year.month, current_year.subbrand, current_year.avg_price_per_unit AS current_price, prev_year.avg_price_per_unit AS prev_year_price, (current_year.avg_price_per_unit - prev_year.avg_price_per_unit) / prev_year.avg_price_per_unit * 100 AS yoy_price_change_percent FROM price_data current_year LEFT JOIN price_data prev_year ON current_year.subbrand = prev_year.subbrand AND current_year.month = prev_year.month AND current_year.year_value = prev_year.year_value + 1 ORDER BY current_year.year_value, current_year.month, current_year.subbrand;", "feedback": "The first query is missing the 'FROM' clause and the second query is more complex and uses a Common Table Expression (CTE) to calculate the year-over-year price change percentage. To enhance the first query, add the 'FROM' clause and consider using a CTE for better readability and maintainability"}
{"question": "How has pricing changed over time for Colgate MAX Franchise brand in Target?", "sql": "WITH brand_data AS ( SELECT year_value, strftime('%m', month_445) AS month, brand, subbrand, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE brand = 'COLGATE MAX FRANCHISE' AND market_desc = 'Target Total BM/FF TA' GROUP BY year_value, strftime('%m', month_445), brand, subbrand ) SELECT year_value, month, brand, subbrand, total_sales_value * 1.0 / total_sales_units AS avg_price_per_unit FROM brand_data ORDER BY year_value, month;", "feedback": "The first query is missing the calculation of average price per unit, which is the correct query's main goal. The correct query uses a Common Table Expression (CTE) to calculate the total sales value and units for each brand and month, then divides the total sales value by total sales units to get the average price per unit"}
{"question": "State the yearly sales data and average price per unit for each product", "sql": "WITH product_data AS ( SELECT item, long_desc, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_value) * 1.0 / SUM(sales_units) AS avg_price_per_unit FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY item, long_desc, year_value ) SELECT * FROM product_data ORDER BY item, year_value;", "feedback": "The first query is missing the calculation for average price per unit, which is the correct query's main goal. The correct query uses a Common Table Expression (CTE) to calculate the total sales value and units for each item, then selects the average price per unit from this CTE"}
{"question": "State the start year, end year, and number of years for each product", "sql": "WITH product_data AS ( SELECT item, long_desc, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_value) * 1.0 / SUM(sales_units) AS avg_price_per_unit FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY item, long_desc, year_value ), product_years AS ( SELECT item, long_desc, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM product_data GROUP BY item, long_desc ) SELECT * FROM product_years ORDER BY item;", "feedback": "The first query is missing the calculation for the number of years, which is the difference between the end and start year. The second query is correct but can be improved by adding a more meaningful alias to the subquery result, e.g., `product_years`"}
{"question": "State the start price and end price for each product", "sql": "WITH product_data AS ( SELECT item, long_desc, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_value) * 1.0 / SUM(sales_units) AS avg_price_per_unit FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY item, long_desc, year_value ), product_years AS ( SELECT item, long_desc, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM product_data GROUP BY item, long_desc ), product_price_growth AS ( SELECT py.item, py.long_desc, py.start_year, py.end_year, py.num_years, pd_start.avg_price_per_unit AS start_price, pd_end.avg_price_per_unit AS end_price FROM product_years py JOIN product_data pd_start ON py.item = pd_start.item AND py.start_year = pd_start.year_value JOIN product_data pd_end ON py.item = pd_end.item AND py.end_year = pd_end.year_value ) SELECT * FROM product_price_growth ORDER BY item;", "feedback": "The first query is missing the calculation of the price growth rate, which is the main goal of the query. The second query is correct but can be improved by adding a column to calculate the price growth rate"}
{"question": "Which CREST 3D WHITE products have had the most drastic price increases?", "sql": "WITH product_data AS ( SELECT item, long_desc, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_value) * 1.0 / SUM(sales_units) AS avg_price_per_unit FROM colgate WHERE brand = 'CREST 3D WHITE' AND market_desc = 'Total US xAOC' GROUP BY item, long_desc, year_value ), product_years AS ( SELECT item, long_desc, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM product_data GROUP BY item, long_desc ), product_price_growth AS ( SELECT py.item, py.long_desc, py.start_year, py.end_year, py.num_years, pd_start.avg_price_per_unit AS start_price, pd_end.avg_price_per_unit AS end_price FROM product_years py JOIN product_data pd_start ON py.item = pd_start.item AND py.start_year = pd_start.year_value JOIN product_data pd_end ON py.item = pd_end.item AND py.end_year = pd_end.year_value ) SELECT item, long_desc, start_price, end_price, num_years, (POW((end_price * 1.0 / start_price), (1.0 / num_years)) - 1) * 100 AS cagr FROM product_price_growth WHERE start_price > 0 ORDER BY cagr DESC;", "feedback": "The first query is missing the calculation for the compound annual growth rate (CAGR), which is the correct query's main goal. The correct query uses a Common Table Expression (CTE) to calculate the CAGR, which is not present in the first query"}
{"question": "Which products have had the most drastic price increases in Target?", "sql": "WITH product_data AS ( SELECT item, long_desc, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_value) * 1.0 / SUM(sales_units) AS avg_price_per_unit FROM colgate WHERE market_desc = 'Target Total BM/FF TA' GROUP BY item, long_desc, year_value ), product_years AS ( SELECT item, long_desc, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM product_data GROUP BY item, long_desc ), product_price_growth AS ( SELECT py.item, py.long_desc, py.start_year, py.end_year, py.num_years, pd_start.avg_price_per_unit AS start_price, pd_end.avg_price_per_unit AS end_price FROM product_years py JOIN product_data pd_start ON py.item = pd_start.item AND py.start_year = pd_start.year_value JOIN product_data pd_end ON py.item = pd_end.item AND py.end_year = pd_end.year_value ) SELECT item, long_desc, start_price, end_price, num_years, (POW((end_price * 1.0 / start_price), (1.0 / num_years)) - 1) * 100 AS cagr FROM product_price_growth WHERE start_price > 0 ORDER BY cagr DESC;", "feedback": "The first query is missing the `WITH` clause, which is necessary to define the temporary result sets. The second query is correct, but it can be improved by adding a check for `end_price > 0` to avoid division by zero errors"}
{"question": "Which products have had the most drastic price decreases?", "sql": "WITH product_data AS ( SELECT item, long_desc, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_value) * 1.0 / SUM(sales_units) AS avg_price_per_unit FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY item, long_desc, year_value ), product_years AS ( SELECT item, long_desc, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM product_data GROUP BY item, long_desc ), product_price_growth AS ( SELECT py.item, py.long_desc, py.start_year, py.end_year, py.num_years, pd_start.avg_price_per_unit AS start_price, pd_end.avg_price_per_unit AS end_price FROM product_years py JOIN product_data pd_start ON py.item = pd_start.item AND py.start_year = pd_start.year_value JOIN product_data pd_end ON py.item = pd_end.item AND py.end_year = pd_end.year_value ) SELECT item, long_desc, start_price, end_price, num_years, (POW((end_price * 1.0 / start_price), (1.0 / num_years)) - 1) * 100 AS cagr FROM product_price_growth WHERE start_price > 0 ORDER BY cagr ASC;", "feedback": "The first query is missing the calculation for CAGR (Compound Annual Growth Rate), which is the correct query's main goal. The correct query uses a subquery to calculate the average price per unit at the start and end of the product's life, then uses these values to calculate the CAGR. To enhance the first query, add the CAGR calculation and join the product_data table to get the start and end prices"}
{"question": "Filter Crest data in Family Dollar", "sql": "SELECT * FROM colgate WHERE franchise = 'CREST' AND market_desc = 'Family Dollar Total TA';", "feedback": "The first query is missing the correct table name and column name. The correct query uses 'franchise_line' instead of 'franchise' and'market_description' instead of'market_desc'."}
{"question": "Filter March 2024 Crest data in Family Dollar", "sql": "SELECT * FROM colgate WHERE franchise = 'CREST' AND market_desc = 'Family Dollar Total TA' AND year_value = 2024 AND strftime('%m', month_445) = '03';", "feedback": "The first query is missing the correct column name for the month, it should be'month_date' instead of'month_445'. The second query is correct but it uses'strftime' function to extract the month from the'month_date' column, which is not necessary in this case because the month is already in the correct format in the'month_date' column"}
{"question": "Filter for Crest products in Family Dollar with promotional sales", "sql": "SELECT * FROM colgate WHERE franchise = 'CREST' AND market_desc = 'Family Dollar Total TA' AND year_value = 2024 AND strftime('%m', month_445) = '03' AND promo_sales_units > 0;", "feedback": "The query to be improved is missing the 'is_real_product' condition, which is present in the true SQL query. To enhance the query, add the condition 'is_real_product = true' to the WHERE clause"}
{"question": "Select distinct Crest products in Family Dollar on promotion", "sql": "SELECT DISTINCT item, long_desc FROM colgate WHERE franchise = 'CREST' AND market_desc = 'Family Dollar Total TA' AND year_value = 2024 AND strftime('%m', month_445) = '03' AND promo_sales_units > 0 ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the `is_real_product = 1` condition, which is present in the true SQL query. To enhance the query, add the missing condition to the WHERE clause"}
{"question": "Which products from Crest were on promo in family dollar in March 2024?", "sql": "SELECT DISTINCT item, long_desc FROM colgate WHERE franchise = 'CREST' AND year_value = 2024 AND strftime('%m', month_445) = '03' AND promo_sales_units > 0 AND market_desc = 'Family Dollar Total TA' ORDER BY item, long_desc;", "feedback": "The query to be improved is missing the `is_real_product = 1` condition, which is present in the true SQL query. To enhance the query, add the missing condition to the WHERE clause"}
{"question": "Filter for Crest products in Family Dollar that are multi-packs", "sql": "SELECT * FROM colgate WHERE franchise = 'CREST' AND market_desc = 'Family Dollar Total TA' AND year_value = 2024 AND strftime('%m', month_445) = '03' AND promo_sales_units > 0 AND multi_pack = 'MULTI';", "feedback": "The first query is missing the condition for the year, which is present in the true SQL query. The true SQL query also includes additional conditions for `month_445`, `promo_sales_units`, and `multi_pack` that are not present in the first query"}
{"question": "Select distinct multi-pack Crest products in Family Dollar on promotion", "sql": "SELECT DISTINCT item, long_desc, size FROM colgate WHERE franchise = 'CREST' AND market_desc = 'Family Dollar Total TA' AND year_value = 2024 AND strftime('%m', month_445) = '03' AND promo_sales_units > 0 AND multi_pack = 'MULTI' ORDER BY item, long_desc, size;", "feedback": "The query is mostly correct, but it's missing the `is_real_product = 1` condition. To enhance the query, add this condition to the WHERE clause"}
{"question": "Calculate total sales units for each SKU in each market", "sql": "WITH market_sku_sales AS ( SELECT market_desc, item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, item, long_desc ) SELECT * FROM market_sku_sales ORDER BY market_desc, total_sales_units DESC;", "feedback": "The first query is missing the `WITH` clause, which is necessary to define the temporary result set. The second query is correct, but it can be improved by adding a more descriptive alias to the CTE (Common Table Expression) to make it easier to understand"}
{"question": "Calculate total sales units for each market", "sql": "WITH market_total_sales AS ( SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc ) SELECT * FROM market_total_sales ORDER BY total_market_units DESC;", "feedback": "The query to be improved is missing the `WITH` clause, which is necessary to define the temporary result set. The correct query uses a Common Table Expression (CTE) to calculate the total sales units for each market, which is then ordered in descending order"}
{"question": "Calculate unit share for each SKU in each market", "sql": "WITH market_sku_sales AS ( SELECT market_desc, item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, item, long_desc ), market_total_sales AS ( SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc ), market_sku_share AS ( SELECT s.market_desc, s.item, s.long_desc, s.total_sales_units, t.total_market_units, (s.total_sales_units * 1.0 / t.total_market_units) * 100 AS unit_share FROM market_sku_sales s JOIN market_total_sales t ON s.market_desc = t.market_desc ) SELECT * FROM market_sku_share ORDER BY market_desc, unit_share DESC;", "feedback": "The first query is missing the calculation of unit_share, which is the main goal of the query. The second query is correct but can be improved by adding a more meaningful alias to the subquery results to avoid confusion with the original table name"}
{"question": "Rank SKUs within each market based on unit share", "sql": "WITH market_sku_sales AS ( SELECT market_desc, item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, item, long_desc ), market_total_sales AS ( SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc ), market_sku_share AS ( SELECT s.market_desc, s.item, s.long_desc, s.total_sales_units, t.total_market_units, (s.total_sales_units * 1.0 / t.total_market_units) * 100 AS unit_share FROM market_sku_sales s JOIN market_total_sales t ON s.market_desc = t.market_desc ), ranked_skus AS ( SELECT market_desc, item, long_desc, total_sales_units, unit_share, RANK() OVER (PARTITION BY market_desc ORDER BY unit_share DESC) AS rank FROM market_sku_share ) SELECT * FROM ranked_skus ORDER BY market_desc, rank;", "feedback": "The first query is missing the `PARTITION BY` clause in the `RANK()` function, which is necessary to rank items within each market description. The second query is correct, but it can be improved by adding a `ORDER BY` clause to the final `SELECT` statement to sort the results by market description and rank"}
{"question": "Select top performing SKU for each market", "sql": "WITH market_sku_sales AS ( SELECT market_desc, item, long_desc, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, item, long_desc ), market_total_sales AS ( SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc ), market_sku_share AS ( SELECT s.market_desc, s.item, s.long_desc, s.total_sales_units, t.total_market_units, (s.total_sales_units * 1.0 / t.total_market_units) * 100 AS unit_share FROM market_sku_sales s JOIN market_total_sales t ON s.market_desc = t.market_desc ), ranked_skus AS ( SELECT market_desc, item, long_desc, total_sales_units, unit_share, RANK() OVER (PARTITION BY market_desc ORDER BY unit_share DESC) AS rank FROM market_sku_share ) SELECT market_desc, item, long_desc, total_sales_units, unit_share FROM ranked_skus WHERE rank = 1 ORDER BY market_desc;", "feedback": "The first query is missing the `WITH` clause to define the temporary result sets, and the second query is using a more complex and efficient approach with Common Table Expressions (CTEs) to calculate the market share of each SKU. To enhance the first query, add the `WITH` clause to define the temporary result sets, and consider using CTEs for better performance and readability"}
{"question": "Rank variants within each market based on unit share", "sql": "WITH market_variant_sales AS ( SELECT market_desc, variant, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, variant ), market_total_sales AS ( SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc ), market_variant_share AS ( SELECT s.market_desc, s.variant, s.total_sales_units, t.total_market_units, (s.total_sales_units * 1.0 / t.total_market_units) * 100 AS unit_share FROM market_variant_sales s JOIN market_total_sales t ON s.market_desc = t.market_desc ), ranked_variants AS ( SELECT market_desc, variant, total_sales_units, unit_share, RANK() OVER (PARTITION BY market_desc ORDER BY unit_share DESC) AS rank FROM market_variant_share ) SELECT * FROM ranked_variants ORDER BY market_desc, rank;", "feedback": "The first query is missing the calculation of unit_share, which is the ratio of total_sales_units to total_market_units. The second query is correct but can be improved by removing the subquery for market_total_sales and instead using a single CTE to calculate the unit_share directly"}
{"question": "Select top performing variant for each market", "sql": "WITH market_variant_sales AS ( SELECT market_desc, variant, SUM(sales_units) AS total_sales_units FROM colgate GROUP BY market_desc, variant ), market_total_sales AS ( SELECT market_desc, SUM(sales_units) AS total_market_units FROM colgate GROUP BY market_desc ), market_variant_share AS ( SELECT s.market_desc, s.variant, s.total_sales_units, t.total_market_units, (s.total_sales_units * 1.0 / t.total_market_units) * 100 AS unit_share FROM market_variant_sales s JOIN market_total_sales t ON s.market_desc = t.market_desc ), ranked_variants AS ( SELECT market_desc, variant, total_sales_units, unit_share, RANK() OVER (PARTITION BY market_desc ORDER BY unit_share DESC) AS rank FROM market_variant_share ) SELECT market_desc, variant, total_sales_units, unit_share FROM ranked_variants WHERE rank = 1 ORDER BY market_desc;", "feedback": "The query to be improved is missing the WITH clause to define the temporary result sets, and the SELECT statement is missing the RANK() function to rank the variants by unit_share. The correct query should use the WITH clause to define the temporary result sets and the RANK() function to rank the variants by unit_share"}
{"question": "Calculate total sales value, units, and volume for each segment by year", "sql": "WITH segment_sales AS ( SELECT segment, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_volume) AS total_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value ) SELECT * FROM segment_sales ORDER BY segment, year_value;", "feedback": "The first query is missing the `year_value` column in the `GROUP BY` clause, which is used in the subquery. The second query is correct, but it can be improved by adding a `WITH` clause to give a meaningful name to the subquery for better readability"}
{"question": "Determine start year, end year, and number of years for each segment", "sql": "WITH segment_sales AS ( SELECT segment, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_volume) AS total_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value ), segment_years AS ( SELECT segment, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM segment_sales GROUP BY segment ) SELECT * FROM segment_years ORDER BY segment;", "feedback": "The first query is missing the calculation for the number of years, which is the difference between the end and start year. The second query is correct but can be improved by adding a more meaningful alias to the CTEs to make the code more readable"}
{"question": "Join start and end year data for each segment", "sql": "WITH segment_sales AS ( SELECT segment, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_volume) AS total_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value ), segment_years AS ( SELECT segment, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM segment_sales GROUP BY segment ), segment_start_end AS ( SELECT sy.segment, sy.start_year, sy.end_year, sy.num_years, ss_start.total_sales_value AS start_sales_value, ss_end.total_sales_value AS end_sales_value, ss_start.total_sales_units AS start_sales_units, ss_end.total_sales_units AS end_sales_units, ss_start.total_sales_volume AS start_sales_volume, ss_end.total_sales_volume AS end_sales_volume FROM segment_years sy JOIN segment_sales ss_start ON sy.segment = ss_start.segment AND sy.start_year = ss_start.year_value JOIN segment_sales ss_end ON sy.segment = ss_end.segment AND sy.end_year = ss_end.year_value ) SELECT * FROM segment_start_end ORDER BY segment;", "feedback": "The first query is missing the `FROM` clause and the second query is overly complex and can be simplified by using a single CTE to calculate the start and end years and sales values"}
{"question": "How are segments growing in terms of sales value, sales units, and sales volume for Target?", "sql": "WITH segment_sales AS ( SELECT segment, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_volume) AS total_sales_volume FROM colgate WHERE market_desc = 'Target Total BM/FF TA' GROUP BY segment, year_value ), segment_years AS ( SELECT segment, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM segment_sales GROUP BY segment ), segment_start_end AS ( SELECT sy.segment, sy.start_year, sy.end_year, sy.num_years, ss_start.total_sales_value AS start_sales_value, ss_end.total_sales_value AS end_sales_value, ss_start.total_sales_units AS start_sales_units, ss_end.total_sales_units AS end_sales_units, ss_start.total_sales_volume AS start_sales_volume, ss_end.total_sales_volume AS end_sales_volume FROM segment_years sy JOIN segment_sales ss_start ON sy.segment = ss_start.segment AND sy.start_year = ss_start.year_value JOIN segment_sales ss_end ON sy.segment = ss_end.segment AND sy.end_year = ss_end.year_value ) SELECT segment, num_years, start_sales_value, end_sales_value, (POW((end_sales_value * 1.0 / start_sales_value), (1.0 / num_years)) - 1) * 100 AS cagr_sales_value, start_sales_units, end_sales_units, (POW((end_sales_units * 1.0 / start_sales_units), (1.0 / num_years)) - 1) * 100 AS cagr_sales_units, start_sales_volume, end_sales_volume, (POW((end_sales_volume * 1.0 / start_sales_volume), (1.0 / num_years)) - 1) * 100 AS cagr_sales_volume FROM segment_start_end WHERE start_sales_value > 0 AND start_sales_units > 0 AND start_sales_volume > 0 ORDER BY cagr_sales_value DESC;", "feedback": "The query is correct but can be improved by adding a more descriptive alias for the CAGR calculation to make it easier to understand. The query can be improved by adding a comment to explain the CAGR calculation formula"}
{"question": "Calculate total sales units for each segment by year", "sql": "SELECT segment, year_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value;", "feedback": "The first query is missing the 'year_value' column in the GROUP BY clause, which is present in the correct query. To enhance the query, add 'year_value' to the GROUP BY clause"}
{"question": "Calculate CAGR for sales units for segments.", "sql": "WITH segment_sales AS (SELECT segment, year_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value), segment_years AS (SELECT segment, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM segment_sales GROUP BY segment), segment_start_end AS (SELECT sy.segment, sy.start_year, sy.end_year, sy.num_years, ss_start.total_sales_units AS start_sales_units, ss_end.total_sales_units AS end_sales_units FROM segment_years sy JOIN segment_sales ss_start ON sy.segment = ss_start.segment AND sy.start_year = ss_start.year_value JOIN segment_sales ss_end ON sy.segment = ss_end.segment AND sy.end_year = ss_end.year_value) SELECT segment, num_years, start_sales_units, end_sales_units, (POW((end_sales_units * 1.0 / start_sales_units), (1.0 / num_years)) - 1) * 100 AS cagr_sales_units FROM segment_start_end WHERE start_sales_units > 0 ORDER BY cagr_sales_units DESC;", "feedback": "The first query is missing the calculation for CAGR (Compound Annual Growth Rate) and the second query is correct. To enhance the first query, add the CAGR calculation using the formula: (end_sales_units / start_sales_units)^(1/num_years) - 1"}
{"question": "Compare segments growing for sales units.", "sql": "WITH segment_sales AS (SELECT segment, year_value, SUM(sales_units) AS total_sales_units FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value), segment_years AS (SELECT segment, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM segment_sales GROUP BY segment), segment_start_end AS (SELECT sy.segment, sy.start_year, sy.end_year, sy.num_years, ss_start.total_sales_units AS start_sales_units, ss_end.total_sales_units AS end_sales_units FROM segment_years sy JOIN segment_sales ss_start ON sy.segment = ss_start.segment AND sy.start_year = ss_start.year_value JOIN segment_sales ss_end ON sy.segment = ss_end.segment AND sy.end_year = ss_end.year_value) SELECT segment, num_years, start_sales_units, end_sales_units, (POW((end_sales_units * 1.0 / start_sales_units), (1.0 / num_years)) - 1) * 100 AS cagr_sales_units FROM segment_start_end WHERE start_sales_units > 0 ORDER BY cagr_sales_units DESC;", "feedback": "The first query is missing the `WITH` clause to define the temporary result sets, and the second query is missing the `FROM` clause to specify the table to query. To enhance the query, add the `WITH` clause to define the temporary result sets and the `FROM` clause to specify the table to query"}
{"question": "Calculate sales velocity for Colgate Optic White products in Target", "sql": "WITH optic_white_prods AS ( SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'COLGATE OPTIC WHITE' AND market_desc = 'Target Total BM/FF TA' AND year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc ), sales_velocity_calculation AS ( SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value * 1.0 / tdp END AS sales_velocity FROM optic_white_prods ) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the `SUM` aggregation function for `total_sales_value` in the subquery, and the second query is using a CTE to calculate the sales velocity, which is a more efficient and readable way to perform the calculation. To enhance the first query, add `SUM(total_sales_value)` to the `SELECT` clause of the subquery, and to enhance the second query, consider adding a `WHERE` clause to filter out rows with zero"}
{"question": "Filter and aggregate data for Colgate Optic White products in ShopRite for 2024", "sql": "WITH optic_white_prods AS ( SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'COLGATE OPTIC WHITE' AND market_desc = 'ShopRite Total TA' AND year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc ) SELECT * FROM optic_white_prods;", "feedback": "The first query is missing the subquery to calculate the total sales value for Optic White products, whereas the true SQL query uses a Common Table Expression (CTE) to calculate the total sales value. To enhance the first query, replace the WHERE clause with a CTE to calculate the total sales value"}
{"question": "Calculate sales velocity for Colgate Optic White products in ShopRite for 2024 ", "sql": "WITH optic_white_prods AS ( SELECT year_value, item, market_desc, brand, subbrand, long_desc, SUM(acv) AS tdp, SUM(sales_value) AS total_sales_value FROM colgate WHERE brand = 'COLGATE OPTIC WHITE' AND market_desc = 'ShopRite Total TA' AND year_value = 2024 GROUP BY year_value, item, market_desc, brand, subbrand, long_desc ), sales_velocity_calculation AS ( SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, CASE WHEN tdp = 0 THEN 0 ELSE total_sales_value * 1.0 / tdp END AS sales_velocity FROM optic_white_prods ) SELECT year_value, item, market_desc, brand, subbrand, long_desc, total_sales_value, tdp, sales_velocity FROM sales_velocity_calculation ORDER BY sales_velocity DESC;", "feedback": "The first query is missing the subbrand filter, which is present in the true SQL query. The first query should be modified to include the subbrand filter to match the true SQL query"}
{"question": "Calculate CAGR for sales value, units, and volume", "sql": "WITH segment_sales AS ( SELECT segment, year_value, SUM(sales_value) AS total_sales_value, SUM(sales_units) AS total_sales_units, SUM(sales_volume) AS total_sales_volume FROM colgate WHERE market_desc = 'Total US xAOC' GROUP BY segment, year_value ), segment_years AS ( SELECT segment, MIN(year_value) AS start_year, MAX(year_value) AS end_year, MAX(year_value) - MIN(year_value) + 1 AS num_years FROM segment_sales GROUP BY segment ), segment_start_end AS ( SELECT sy.segment, sy.start_year, sy.end_year, sy.num_years, ss_start.total_sales_value AS start_sales_value, ss_end.total_sales_value AS end_sales_value, ss_start.total_sales_units AS start_sales_units, ss_end.total_sales_units AS end_sales_units, ss_start.total_sales_volume AS start_sales_volume, ss_end.total_sales_volume AS end_sales_volume FROM segment_years sy JOIN segment_sales ss_start ON sy.segment = ss_start.segment AND sy.start_year = ss_start.year_value JOIN segment_sales ss_end ON sy.segment = ss_end.segment AND sy.end_year = ss_end.year_value ) SELECT segment, num_years, start_sales_value, end_sales_value, (POW((end_sales_value * 1.0 / start_sales_value), (1.0 / num_years)) - 1) * 100 AS cagr_sales_value, start_sales_units, end_sales_units, (POW((end_sales_units * 1.0 / start_sales_units), (1.0 / num_years)) - 1) * 100 AS cagr_sales_units, start_sales_volume, end_sales_volume, (POW((end_sales_volume * 1.0 / start_sales_volume), (1.0 / num_years)) - 1) * 100 AS cagr_sales_volume FROM segment_start_end WHERE start_sales_value > 0 AND start_sales_units > 0 AND start_sales_volume > 0 ORDER BY cagr_sales_value DESC;", "feedback": "The first query is missing the subquery to calculate the CAGR (Compound Annual Growth Rate) for sales value, units, and volume, whereas the true SQL query uses a Common Table Expression (CTE) to calculate the CAGR for each segment. To enhance the query, replace the subquery with a CTE to calculate the CAGR for each segment"}
